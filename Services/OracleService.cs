using System.Data;
using Oracle.ManagedDataAccess.Client;
using OracleManagedAccessWebAPI.Models;

namespace OracleManagedAccessWebAPI.Services;

public class OracleService
    {
        private readonly string _connectionString;

        public OracleService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("OracleDb");
        }

        // Initialize database (create table if missing)
        public async Task InitializeAsync()
        {
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();

            using var checkCmd = connection.CreateCommand();
            checkCmd.CommandText = "SELECT COUNT(*) FROM USER_TABLES WHERE TABLE_NAME = 'PRODUCTS'";
            var count = Convert.ToInt32(await checkCmd.ExecuteScalarAsync());
            if (count == 0)
            {
                using var ddlCmd = connection.CreateCommand();
                ddlCmd.CommandText = @"
                    CREATE TABLE Products (
                        Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        Name VARCHAR2(100),
                        Price NUMBER(10,2)
                    )";
                await ddlCmd.ExecuteNonQueryAsync();
            }
        }

        // CRUD operations
        public async Task<int> CreateProductAsync(Product product)
        {
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();
            using var cmd = connection.CreateCommand();
            cmd.CommandText = "INSERT INTO Products (Name, Price) VALUES (:name, :price) RETURNING Id INTO :id";
            cmd.Parameters.Add(new OracleParameter("name", product.Name));
            cmd.Parameters.Add(new OracleParameter("price", product.Price));
            var idParam = new OracleParameter("id", OracleDbType.Int32, ParameterDirection.Output);
            cmd.Parameters.Add(idParam);
            await cmd.ExecuteNonQueryAsync();
            return Convert.ToInt32(idParam.Value.ToString());
        }

        public async Task<IEnumerable<Product>> GetProductsAsync()
        {
            var list = new List<Product>();
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();
            using var cmd = connection.CreateCommand();
            cmd.CommandText = "SELECT Id, Name, Price FROM Products";
            using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                list.Add(new Product
                {
                    Id = reader.GetInt32(0),
                    Name = reader.GetString(1),
                    Price = reader.GetDecimal(2)
                });
            }
            return list;
        }

        public async Task<Product> GetProductByIdAsync(int id)
        {
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();
            using var cmd = connection.CreateCommand();
            cmd.CommandText = "SELECT Id, Name, Price FROM Products WHERE Id = :id";
            cmd.Parameters.Add(new OracleParameter("id", id));
            using var reader = await cmd.ExecuteReaderAsync();
            if (await reader.ReadAsync())
            {
                return new Product
                {
                    Id = reader.GetInt32(0),
                    Name = reader.GetString(1),
                    Price = reader.GetDecimal(2)
                };
            }
            return null;
        }

        public async Task UpdateProductAsync(Product product)
        {
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();
            using var cmd = connection.CreateCommand();
            cmd.CommandText = "UPDATE Products SET Name = :name, Price = :price WHERE Id = :id";
            cmd.Parameters.Add(new OracleParameter("name", product.Name));
            cmd.Parameters.Add(new OracleParameter("price", product.Price));
            cmd.Parameters.Add(new OracleParameter("id", product.Id));
            await cmd.ExecuteNonQueryAsync();
        }

        public async Task DeleteProductAsync(int id)
        {
            using var connection = new OracleConnection(_connectionString);
            await connection.OpenAsync();
            using var cmd = connection.CreateCommand();
            cmd.CommandText = "DELETE FROM Products WHERE Id = :id";
            cmd.Parameters.Add(new OracleParameter("id", id));
            await cmd.ExecuteNonQueryAsync();
        }
    }